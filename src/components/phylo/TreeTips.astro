---
/*
  Component: TreeTips

  Purpose
  - Render a single 'tip' (list item) used by the phylogenetic tree UI.
  - Shows an optional expand/collapse control, a taxon label, and child count.
  - Renders connector lines and nested children via slots.

  Props (Astro.props)
  - label?: string         Optional short label or rank hint to help readers.
  - taxonName: string      Required. The taxon name to display.
  - idx: number            Required. Zero-based index of this item in the parent list.
  - length: number         Required. Total number of items in the parent list.
  - childCount?: number    Optional. When present, an expand/collapse button and
                           child count are rendered. Omit for leaf nodes.
  - italic?: boolean       Optional. If true, the taxon label is rendered in italics.
  - url?: string           Optional. If provided, the taxon label renders as a link.
  - expanded: boolean      Required. Whether children are visible initially.

  Behavior
  - Toggle button (when rendered) sets aria-expanded and toggles the nested <ul>
    visibility using inline styles. The DOM script adds click handlers for
    progressive enhancement on the client.

  Accessibility
  - Toggle button uses aria-expanded and an aria-label that flips between
    "Expand" and "Collapse". TaxonLabel should provide semantic link text
    when `url` is used.

  Usage example
  <TreeTips
    taxonName="Z. bartoni"
    label="Species"
    idx={0}
    length={3}
    childCount={2}
    italic
    url="/taxon/z-bartoni"
    expanded={false}
  >
    <!-- nested TreeTips children here -->
  </TreeTips>

  Notes
  - Keep toggle element ids unique (toggle-{idx} is local to a list level).
  - The embedded client-side script uses simple DOM APIs; if you prefer a
    framework-reactive approach, replace the script with framework handlers.
*/

import cntl from "cntl";
import TaxonLabel from "./TaxonLabel.astro";
import LabelCounts from "./LabelCounts.astro";
import VerticalLines from "./VerticalLines.astro";
import HorizontalLines from "./HorizontalLines.astro";

interface Props {
  label?: string; // optional, additional info to help reader understand the taxon rank
  taxonName: string;
  idx: number; // zero-based index of this item
  length: number; // total number of items in this list
  // optional, number of children if this is a parent
  // if childCount is not provided, will not render the expand button or item count
  // This will always be the case for leaf nodes (typically species)
  childCount?: number;
  italic?: boolean; // optional, if true, label will be italicized
  url?: string; // optional, if provided, label will be a link
  expanded: boolean; // whether the item is expanded or collapsed at the start
}
const { label, taxonName, idx, length, childCount, italic, url, expanded } =
  Astro.props;

const isOnlyChild = length === 1;
const isFirstChild = idx === 0;
const isLastItem = idx === length - 1;

const containerClasses = cntl`
  relative
  ml-2
  pl-2
`;

const itemClasses = cntl`
  flex
  w-fit
  gap-2
  items-center
  bg-spectra-200
  dark:bg-spectra-800
  text-slate-900
  dark:text-slate-100
  rounded-xl
  px-4
  relative
  my-2
  opacity-80
  whitespace-nowrap
`;

const buttonDivClasses = cntl`
  border-r
  border-spectra-400
  dark:border-spectra-600
  py-1
  mr-2
  text-center
`;
---

<ul class={containerClasses}>
  <li class="relative pl-6">
    <VerticalLines
      isLastItem={isLastItem}
      isFirstChild={isFirstChild}
      isOnlyChild={isOnlyChild}
    />
    <HorizontalLines />
    <div id="taxon-label" class={itemClasses}>
      {
        childCount && (
          <div class={buttonDivClasses}>
            <button
              id={`toggle-${idx}`}
              class="bg-transparent mr-4 text-2xl"
              aria-expanded={expanded}
              aria-label={expanded ? "Collapse" : "Expand"}
            >
              {expanded ? "–" : "+"}
            </button>
          </div>
        )
      }
      <TaxonLabel
        taxonName={taxonName}
        label={label}
        italic={italic}
        url={url}
      />
      <LabelCounts childCount={childCount} />
    </div>

    <ul
      id="children"
      class="ml-4 children"
      style={`display: ${expanded ? "block" : "none"}`}
    >
      <slot />
    </ul>
  </li>
</ul>

<script>
  const buttons = document.querySelectorAll("button[id^='toggle-']");
  buttons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const li = btn.closest("li");
      if (!li) return;
      const children = li.querySelector(".children") as HTMLElement | null;
      if (!children) return;
      const expanded = btn.getAttribute("aria-expanded") === "true";
      btn.setAttribute("aria-expanded", String(!expanded));
      btn.textContent = expanded ? "+" : "–";
      btn.setAttribute("aria-label", expanded ? "Expand" : "Collapse");
      children.style.display = expanded ? "none" : "block";
    });
  });
</script>
